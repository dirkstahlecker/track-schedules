[{"/Users/dirkstahlecker/programming/track-schedules/client/src/index.tsx":"1","/Users/dirkstahlecker/programming/track-schedules/client/src/App.tsx":"2"},{"size":503,"mtime":1610220449487,"results":"3","hashOfConfig":"4"},{"size":4672,"mtime":1610317987267,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"ru5j3s",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/dirkstahlecker/programming/track-schedules/client/src/index.tsx",["13"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["14","15"],"/Users/dirkstahlecker/programming/track-schedules/client/src/App.tsx",["16","17","18"],"import React from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport {makeObservable, observable, runInAction, action} from \"mobx\";\n\nexport class AppMachine\n{\n  @observable testData: any = null;\n  @observable parseDocUrl: string | null = null;\n  @observable parseDocTrackName: string | null = null;\n  @observable eventDate: string | null = null;\n\n  @observable eventsForDate: any = null;\n\n  constructor()\n  {\n    makeObservable(this);\n  }\n\n  private async getRequest(url: string): Promise<any>\n  {\n    const raw = await fetch(url);\n    return raw.json();\n  }\n\n  private async postRequest(url: string, data: any): Promise<any>\n  {\n    const testDataRaw = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      // mode: 'cors', // no-cors, *cors, same-origin\n      // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // redirect: 'follow', // manual, *follow, error\n      // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return testDataRaw.json();\n  }\n\n  public async addEvent(date: string, trackname: string): Promise<boolean>\n  {\n    return this.postRequest(\n      \"/api/events/add\", \n      {date: date, trackname: trackname});\n  }\n\n  public async getEventForDate(date: string): Promise<any>\n  {\n    return this.getRequest(`/api/events/${date}`)\n  }\n\n  public async parseDocument(): Promise<void>\n  {\n    return this.postRequest(\n      \"/api/events/parseDocument\", \n      {url: this.parseDocUrl, trackname: this.parseDocTrackName});\n  }\n}\n\nexport interface AppProps\n{\n\n}\n\n@observer\nclass App extends React.Component<AppProps>\n{\n  private machine: AppMachine = new AppMachine();\n\n  private async addEvent(): Promise<void>\n  {\n    const result: boolean = await this.machine.addEvent(\"2021-01-08\", \"Seekonk Speedway\");\n    runInAction(() => this.machine.testData = result);\n  }\n\n  private async submitUrl(): Promise<void>\n  {\n    const result = await this.machine.parseDocument();\n  }\n\n  private async submitGetEventsForDate(): Promise<void>\n  {\n    const result = await this.machine.getEventForDate(this.machine.eventDate!!);\n    let rows: any[];\n    if (result.rows.length == 0)\n    {\n      rows = [];\n    }\n    else\n    {\n      rows = result.rows;\n    }\n    runInAction(() => this.machine.eventsForDate = rows);\n  }\n\n  private onParseDocumentUrlChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.parseDocUrl = event.currentTarget.value);\n  };\n\n  private onParseDocumentTrackNameChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.parseDocTrackName = event.currentTarget.value);\n  };\n\n  private onGetEventForDateDateChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.eventDate = event.currentTarget.value);\n  }\n\n  componentDidMount()\n  {\n    // this.addEvent();\n  }\n\n  private renderListOfTracks(rows: Object[]): JSX.Element\n  {\n    return <div>\n      {\n        rows.map((row: any) => {\n          return <span>{row.trackname}</span>;\n        })\n      }\n    </div>\n  }\n\n  render()\n  {\n    return <div className=\"App\">\n      The value returned from the server is:\n      {this.machine.testData}\n      <br/>\n      <hr/>\n      <br/>\n      Parse Document: <label htmlFor=\"parseDocumentInput\">URL:</label>\n      <input type=\"text\" name=\"parseDocumentInput\" onChange={this.onParseDocumentUrlChange}/>\n      <label htmlFor=\"parseDocumentTrackName\">Track Name:</label>\n      <input type=\"text\" name=\"parseDocumentTrackName\" onChange={this.onParseDocumentTrackNameChange}/>\n      <button onClick={() => this.submitUrl()}>Submit</button>\n      <hr/>\n      Get events for date:<br/>\n      <label htmlFor=\"getEventsForDateInput\">Date: </label>\n      <input type=\"text\" name=\"getEventsForDateInput\" onChange={this.onGetEventForDateDateChange}/>\n      <button onClick={() => this.submitGetEventsForDate()}>Submit</button>\n      <br/>\n      {\n        this.machine.eventDate != null &&\n          <>\n            Date:\n            {this.machine.eventDate}\n          </>\n      }\n      {\n        this.machine.eventsForDate != null &&\n        this.renderListOfTracks(this.machine.eventsForDate)\n      }\n    </div>\n  }\n}\n\nexport default App;\n",{"ruleId":"19","severity":1,"message":"20","line":5,"column":8,"nodeType":"21","messageId":"22","endLine":5,"endColumn":23},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"19","severity":1,"message":"27","line":4,"column":50,"nodeType":"21","messageId":"22","endLine":4,"endColumn":56},{"ruleId":"19","severity":1,"message":"28","line":82,"column":11,"nodeType":"21","messageId":"22","endLine":82,"endColumn":17},{"ruleId":"29","severity":1,"message":"30","line":89,"column":28,"nodeType":"31","messageId":"32","endLine":89,"endColumn":30},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["33"],"no-negated-in-lhs",["34"],"'action' is defined but never used.","'result' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]