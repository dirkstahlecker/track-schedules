[{"/Users/dirkstahlecker/programming/track-schedules/client/src/index.tsx":"1","/Users/dirkstahlecker/programming/track-schedules/client/src/App.tsx":"2"},{"size":503,"mtime":1612831040874,"results":"3","hashOfConfig":"4"},{"size":6087,"mtime":1612831040873,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ru5j3s",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"/Users/dirkstahlecker/programming/track-schedules/client/src/index.tsx",["12"],"/Users/dirkstahlecker/programming/track-schedules/client/src/App.tsx",["13"],"import React from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport {makeObservable, observable, runInAction, action} from \"mobx\";\nimport { DbRow } from './Types';\n\nexport class AppMachine\n{\n  @observable testData: any = null;\n  @observable parseDocUrl: string | null = null;\n  @observable parseDocTrackName: string | null = null;\n  @observable eventDate: string | null = null;\n  @observable returnedRowsFromParseDocument: any = null;\n\n  @observable eventsForDate: any = null;\n  @observable uniqueTracks: string[] | null = null;\n\n  constructor()\n  {\n    makeObservable(this);\n  }\n\n  private async getRequest(url: string): Promise<any>\n  {\n    const raw = await fetch(url);\n    return raw.json();\n  }\n\n  private async postRequest(url: string, data: any): Promise<any>\n  {\n    const testDataRaw = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      // mode: 'cors', // no-cors, *cors, same-origin\n      // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // redirect: 'follow', // manual, *follow, error\n      // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return testDataRaw.json();\n  }\n\n  public async addEvent(date: string, trackname: string): Promise<boolean>\n  {\n    return this.postRequest(\n      \"/api/events/add\", \n      {date: date, trackname: trackname});\n  }\n\n  public async getEventForDate(date: string): Promise<any>\n  {\n    const d = new Date(date);\n    return this.getRequest(`/api/events/${d}`)\n  }\n\n  public async parseDocument(): Promise<DbRow[] | null>\n  {\n    return this.postRequest(\n      \"/api/events/parseDocument\", \n      {url: this.parseDocUrl, trackname: this.parseDocTrackName});\n  }\n\n  public async refreshUniqueTracks(): Promise<void>\n  {\n    const resultRaw = await fetch(`/api/tracks/distinct`);\n    const result = await resultRaw.json();\n    this.uniqueTracks = result;\n  }\n}\n\nexport interface AppProps\n{\n\n}\n\n@observer\nclass App extends React.Component<AppProps>\n{\n  private machine: AppMachine = new AppMachine();\n\n  private async addEvent(): Promise<void>\n  {\n    const result: boolean = await this.machine.addEvent(\"2021-01-08\", \"Seekonk Speedway\");\n    runInAction(() => this.machine.testData = result);\n  }\n\n  private async submitUrl(): Promise<void>\n  {\n    const result: DbRow[] | null = await this.machine.parseDocument();\n    runInAction(() => this.machine.returnedRowsFromParseDocument = result);\n  }\n\n  private async submitGetEventsForDate(): Promise<void>\n  {\n    const result = await this.machine.getEventForDate(this.machine.eventDate!!);\n    let rows: any[];\n    if (result.rows.length === 0)\n    {\n      rows = [];\n    }\n    else\n    {\n      rows = result.rows;\n    }\n    runInAction(() => this.machine.eventsForDate = rows);\n  }\n\n  private async refreshUniqueTracks(): Promise<void>\n  {\n    this.machine.refreshUniqueTracks();\n  }\n\n  private onParseDocumentUrlChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.parseDocUrl = event.currentTarget.value);\n  };\n\n  private onParseDocumentTrackNameChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.parseDocTrackName = event.currentTarget.value);\n  };\n\n  private onGetEventForDateDateChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    runInAction(() => this.machine.eventDate = event.currentTarget.value);\n  }\n\n  componentDidMount()\n  {\n    // this.addEvent();\n  }\n\n  private renderDbRows(rows: DbRow[] | null): JSX.Element\n  {\n    if (rows == null)\n    {\n      return <></>;\n    }\n    return <div>\n      {\n        rows.map((row: DbRow) => {\n          return <>\n            <div>\n              {row.trackname}:&nbsp;\n              {row.eventdate}\n            </div>\n            <br/>\n          </>;\n        })\n      }\n    </div>\n  }\n\n  private renderTracksList(rows: DbRow[] | null): JSX.Element\n  {\n    if (rows == null)\n    {\n      return <></>;\n    }\n    return <div>\n      {\n        rows.map((row: any) => {\n          return <div>{row.trackname}</div>;\n        })\n      }\n    </div>\n  }\n\n  render()\n  {\n    return <div className=\"App\">\n      The value returned from the server is:\n      {this.machine.testData}\n      <br/>\n\n      <hr/>\n      <label htmlFor=\"parseDocumentInput\">Parse Document (URL or text):</label>\n      <input type=\"text\" name=\"parseDocumentInput\" onChange={this.onParseDocumentUrlChange}/>\n      <br/>\n      <label htmlFor=\"parseDocumentTrackName\">Track Name:</label>\n      <input type=\"text\" name=\"parseDocumentTrackName\" onChange={this.onParseDocumentTrackNameChange}/>\n      <button onClick={() => this.submitUrl()}>Submit</button>\n      <br/>\n      {\n        this.machine.returnedRowsFromParseDocument != null && \n        <>\n          Inserted {this.machine.returnedRowsFromParseDocument.length} rows.\n          <br/>\n          {this.renderDbRows(this.machine.returnedRowsFromParseDocument)}\n        </>\n      }\n\n      <hr/>\n      Get events for date:<br/>\n      <label htmlFor=\"getEventsForDateInput\">Date: </label>\n      <input type=\"text\" name=\"getEventsForDateInput\" onChange={this.onGetEventForDateDateChange}/>\n      <button onClick={() => this.submitGetEventsForDate()}>Submit</button>\n      <br/>\n      {\n        this.machine.eventDate != null &&\n          <>\n            Date:\n            {this.machine.eventDate}\n          </>\n      }\n      {\n        this.machine.eventsForDate != null &&\n        this.renderTracksList(this.machine.eventsForDate)\n      }\n\n      <hr/>\n      Unique Tracks: <button onClick={() => this.refreshUniqueTracks()}>Refresh</button>\n      {\n        this.machine.uniqueTracks != null &&\n        <>\n          {\n            this.machine.uniqueTracks.map((track: string) => {\n              return <div>{track}</div>;\n            })\n          }\n        </>\n      }\n    </div>\n  }\n}\n\nexport default App;\n",["14","15"],{"ruleId":"16","severity":1,"message":"17","line":5,"column":8,"nodeType":"18","messageId":"19","endLine":5,"endColumn":23},{"ruleId":"16","severity":1,"message":"20","line":4,"column":50,"nodeType":"18","messageId":"19","endLine":4,"endColumn":56},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'action' is defined but never used.","no-native-reassign",["25"],"no-negated-in-lhs",["26"],"no-global-assign","no-unsafe-negation"]